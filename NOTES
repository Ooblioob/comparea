Path forward:
- UI
  - Click+drag on background should pan both shapes
  - Add share links which preserve the position of the features
  - Add transitions
  - Expand the <svg> behind the info boxes
  - Show "20% larger" in the UI somewhere
  - Add a favicon
  - Use standard CSS @media breakpoints
  ~ Hide the URL bar on mobile (works on some iOS, not Android)
  - Write perceptual diff tests for various browser resolutions
  - Add links to github on about page (for data download)
  - Add zoom in/out buttons
  - Add hand icon when hovering/dragging
  - Center scrollwheel zoom around the cursor
  - Bug: two finger touch both zooms and drags the shapes (should just drag)
  - Bug: shapes disappear when you rotate to lanscape on mobile
  - Bug: expanding window should expand existing shapes.
  - Bug: Keyboard doesn't go away at the right time on mobile
  - Bug: change "USA" to "United Kingdom" on home page
    --> placement is different than if you reload.
  x Change packers to take spans, not bounds (optimization)

- Productionization
  - Set up Cloudfront, with an appropriate versioning scheme.
  - Use a CDN where appropriate (jQuery, D3, ...)
  - Remove unused packers (diagonal, scootched)
  - Minify JS & CSS?

- Data curation:
  - Consider down-sampling some shapes? (perf boost on mobile/tablet)
  - Generate my own continent features w/ higher resolution
  - What are the other polygons in geometry.coordintes? (after index 0)
    --> e.g. in KGZ. Are they negative polygons?
  - Detect small islands which significantly affect bounding boxes
    --> e.g. AUS, NZL
  - Represent US, AUS, CAN as FeatureCollection of admin-1



I'm using http://www.jasondavies.com/maps/countries-by-area/ as a starting
point for projecting shape data using D3.

TopoJSON is similar to GeoJSON, but dramatically more compact.
Perhaps if I use TopoJSON, I could get away with not having a database!


This returns a list of GeoJSON objects:
topojson.feature(world, world.objects.countries).features

ogr commands
------------
List layers in a shapefile:
ogrinfo -so foo.shp

List fields in a shapefile layer:
ogrinfo -so foo.shp ne_50m_admin_0_countries_lakes

Drop the '-so' to see individual records.

Interesting fields in ne_50m_admin_0:
  pop_est (=313973000.000000)
  gdp_md_est (=15094000.000000)
  su_a3 (="USA")
  type (="Country")
  admin (="United States of America")
  name (="United States")


packing
-------

Using bounding boxes is appealing, but it's very sensitive to small outlying
islands. For example, there's a speck way to the southeast of Australia that
significantly affects its bounding box.

Using convex hulls, or dropping polygons representing <1% of the total area
could help here.

I've come up with a few strategies:
  - overlap: line up the centroids, expand to fill the svg area
  - scootchedOverlap: same as above, but scootch the shapes apart to fill any
        available space around them.
  - insetPacker: wrapper around any packer, adds some empty margins
  - horizontalPacker: put the shapes side-by-side, aligning their centroids.
  - verticalPacker: put the shapes top-to-bottom, aligning their centroids.

When there's a huge size disparity, pure overlap is pretty good, so long as
the smaller shape goes on top. I'm torn between fitting the bbox and keeping
the centroids in the center.

Here's an idea for a strategy:
  - If the shapes are within a factor of 4 in area:
      Use either horizontalPacker or verticalPacker, whichever produces the
      largest scaleMult.
  - Otherwise, use overlappingPacker.
